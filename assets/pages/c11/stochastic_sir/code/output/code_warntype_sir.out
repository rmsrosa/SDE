@code_warntype for SIR!
MethodInstance for Main.FD_SANDBOX_9898039245808358067.SIR!(::Vector{Float64}, ::Vector{Int64}, ::Tuple{Float64, Float64, Float64, Float64, Rational{Int64}}, ::Float64)
  from SIR!(du, u, p, t) in Main.FD_SANDBOX_9898039245808358067 at none:1
Arguments
  #self#::Core.Const(Main.FD_SANDBOX_9898039245808358067.SIR!)
  du::Vector{Float64}
  u::Vector{Int64}
  p::Tuple{Float64, Float64, Float64, Float64, Rational{Int64}}
  t::Float64
Locals
  @_6::Int64
  @_7::Int64
  gamma::Float64
  beta::Float64
  N::Float64
  I::Int64
  S::Int64
Body::Float64
1 ─ %1  = Base.indexed_iterate(u, 1)::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(2)])
│         (S = Core.getfield(%1, 1))
│         (@_7 = Core.getfield(%1, 2))
│   %4  = Base.indexed_iterate(u, 2, @_7::Core.Const(2))::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(3)])
│         (I = Core.getfield(%4, 1))
│   %6  = Base.indexed_iterate(p, 1)::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(2)])
│         (N = Core.getfield(%6, 1))
│         (@_6 = Core.getfield(%6, 2))
│   %9  = Base.indexed_iterate(p, 2, @_6::Core.Const(2))::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(3)])
│         (beta = Core.getfield(%9, 1))
│         (@_6 = Core.getfield(%9, 2))
│   %12 = Base.indexed_iterate(p, 3, @_6::Core.Const(3))::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(4)])
│         (gamma = Core.getfield(%12, 1))
│   %14 = -beta::Float64
│   %15 = S::Int64
│   %16 = (%14 * %15 * I)::Float64
│   %17 = (%16 / N)::Float64
│         Base.setindex!(du, %17, 1)
│   %19 = (beta * S * I)::Float64
│   %20 = (%19 / N)::Float64
│   %21 = (gamma * I)::Float64
│   %22 = (%20 - %21)::Float64
│         Base.setindex!(du, %22, 2)
└──       return %22

nothing

@code_warntype for SIR_noise!
MethodInstance for Main.FD_SANDBOX_9898039245808358067.SIR_noise!(::Matrix{Float64}, ::Vector{Int64}, ::Tuple{Float64, Float64, Float64, Float64, Rational{Int64}}, ::Float64)
  from SIR_noise!(du, u, p, t) in Main.FD_SANDBOX_9898039245808358067 at none:1
Arguments
  #self#::Core.Const(Main.FD_SANDBOX_9898039245808358067.SIR_noise!)
  du::Matrix{Float64}
  u::Vector{Int64}
  p::Tuple{Float64, Float64, Float64, Float64, Rational{Int64}}
  t::Float64
Locals
  @_6::Int64
  @_7::Int64
  gW::Rational{Int64}
  bW::Float64
  sigma_gamma::Rational{Int64}
  sigma_beta::Float64
  N::Float64
  I::Int64
  S::Int64
Body::Rational{Int64}
1 ─ %1  = Base.indexed_iterate(u, 1)::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(2)])
│         (S = Core.getfield(%1, 1))
│         (@_7 = Core.getfield(%1, 2))
│   %4  = Base.indexed_iterate(u, 2, @_7::Core.Const(2))::Core.PartialStruct(Tuple{Int64, Int64}, Any[Int64, Core.Const(3)])
│         (I = Core.getfield(%4, 1))
│   %6  = Base.indexed_iterate(p, 1)::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(2)])
│         (N = Core.getfield(%6, 1))
│         (@_6 = Core.getfield(%6, 2))
│   %9  = Base.indexed_iterate(p, 2, @_6::Core.Const(2))::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(3)])
│         Core.getfield(%9, 1)
│         (@_6 = Core.getfield(%9, 2))
│   %12 = Base.indexed_iterate(p, 3, @_6::Core.Const(3))::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(4)])
│         Core.getfield(%12, 1)
│         (@_6 = Core.getfield(%12, 2))
│   %15 = Base.indexed_iterate(p, 4, @_6::Core.Const(4))::Core.PartialStruct(Tuple{Float64, Int64}, Any[Float64, Core.Const(5)])
│         (sigma_beta = Core.getfield(%15, 1))
│         (@_6 = Core.getfield(%15, 2))
│   %18 = Base.indexed_iterate(p, 5, @_6::Core.Const(5))::Core.PartialStruct(Tuple{Rational{Int64}, Int64}, Any[Rational{Int64}, Core.Const(6)])
│         (sigma_gamma = Core.getfield(%18, 1))
│   %20 = (sigma_beta * S * I)::Float64
│         (bW = %20 / N)
│         (gW = sigma_gamma * I)
│   %23 = -bW::Float64
│         Base.setindex!(du, %23, 1, 1)
│         Base.setindex!(du, 0.0, 1, 2)
│         Base.setindex!(du, bW, 2, 1)
│   %27 = -gW::Rational{Int64}
│         Base.setindex!(du, %27, 2, 2)
└──       return %27

nothing
